<?xml version="1.0" encoding="utf-8"?>
<!--
自定义内容编辑器组件
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="com.yzl.components.*"
		 minHeight="0" minWidth="0"
		 creationComplete="workPageGroup_creationCompleteHandler(event)" click="backgroundClick_Handler(event)" xmlns:services="com.yzl.services.*">
	<fx:Metadata>
		[Event(name="pageIndexChanged",type="flash.events.Event")]
		[Event(name="fouseOut",type="flash.events.Event")]
		[Event(name="displayObjectUp",type="flash.events.Event")]
		[Event(name="displayObjectDown",type="flash.events.Event")]
		[Event(name="dataChanged",type="com.yzl.events.MyCustomEvent")]
		[Event(name="objectHandlesChanged",type="com.yzl.events.MyCustomEvent")]
		[Event(name="autoFillPhoto_pageGroup",type="com.yzl.events.MyCustomEvent")]
		[Event(name="deleteSelectedObject",type="flash.events.Event")]
		[Event(name="backGroundColorChanged",type="com.yzl.events.MyCustomEvent")]
		[Event(name="selectedObjAlphaChanged",type="com.yzl.events.MyCustomEvent")]
		[Event(name="dropShadowChanged",type="com.yzl.events.MyCustomEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import cn.alex.TextEditor;
			
			import com.king.loadAphaImage.InteractivePNG;
			import com.roguedevelopment.objecthandles.*;
			import com.roguedevelopment.objecthandles.constraints.SizeConstraint;
			import com.yzl.constant.URLS;
			import com.yzl.events.MyCustomEvent;
			import com.yzl.manage.PopUpEffect;
			import com.yzl.manage.PopupModellocator;
			import com.yzl.model.DataModel;
			import com.yzl.util.TransformTextToPNG;
			import com.yzl.valueObject.BackgroundVO;
			import com.yzl.valueObject.DecoratorVO;
			import com.yzl.valueObject.DisplayObjectVO;
			import com.yzl.valueObject.FrameVO;
			import com.yzl.valueObject.MyGroup;
			import com.yzl.valueObject.MyImage;
			import com.yzl.valueObject.PageContainerVO;
			import com.yzl.valueObject.PageVO;
			import com.yzl.valueObject.PhotoVO;
			import com.yzl.valueObject.TextVO;
			import com.yzl.valueObject.VOName;
			import com.yzl.valueObject.filters.DropShadowFilterVO;
			import com.yzl.view.myBackgroundView;
			
			import flash.filters.DropShadowFilter;
			import flash.text.engine.TextLine;
			
			import mx.core.FlexGlobals;
			import mx.core.IUIComponent;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.ResizeEvent;
			import mx.graphics.SolidColor;
			import mx.graphics.SolidColorStroke;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.utils.NameUtil;
			import mx.utils.StringUtil;
			
			import spark.components.BorderContainer;
			import spark.components.Image;
			import spark.components.RichEditableText;
			import spark.components.TextArea;
			import spark.events.TextOperationEvent;
			import spark.primitives.Rect;
			import spark.skins.spark.ImageSkin;
			
			public var objectHandles:ObjectHandles;
			
			public var model:PageVO;
			private var dataModel:DataModel = DataModel.getInstance();
			
			private var textEditor:TextEditor;
			
			protected function workPageGroup_creationCompleteHandler(event:FlexEvent):void
			{
				
				this.addEventListener("pageIndexChanged",pageIndexChange_Handle);
				this.addEventListener("fouseOut",workGroupFouseOut_Handler);
			    this.addEventListener("displayObjectDown",displayObjectDown_Handler);
				this.addEventListener("displayObjectUp",displayObjectUp_Handler);
				this.addEventListener("mainEditClick",backgroundClick_Handler);
				this.addEventListener("deleteSelectedObject",deleteSelectedObjectHandler);
				this.addEventListener("autoFillPhoto_pageGroup",onAutoFillPhoto_Handler);
				this.addEventListener("backGroundColorChanged",onBackgroundColorChanged_Handler);
				this.addEventListener("selectedObjAlphaChanged",selectedObjAlphaChanged_Handler);
				this.addEventListener("dropShadowChanged",dropShadowChanged_Handler);
				this.addEventListener(FlexEvent.UPDATE_COMPLETE,testUpdate_Handler);
				
				objectHandles = new ObjectHandles(this,null,new Flex4HandleFactory(),new Flex4ChildManager());
				textEditor = new TextEditor();
				
			}
			
			private function loadBackground(backModel:BackgroundVO):void
			{
				var backgroundGroup:myBackgroundView = new myBackgroundView();
				if(backModel.color)
				{
					var ti:Image = new Image();
					var rect:Rect = new Rect();
					rect.width = model.templateW;
					
					rect.height =  model.templateH;
					rect.fill = new SolidColor(backModel.color);
					if(this.normalGroup.numElements>0)
					{
						if(this.normalGroup.getElementAt(0) is myBackgroundView)
						{
							this.model.getBackgroundVO(0).color = backModel.color;
							(this.normalGroup.getElementAt(0) as myBackgroundView).removeAllElements();
							(this.normalGroup.getElementAt(0) as myBackgroundView).addElement(rect);
							((FlexGlobals.topLevelApplication.bottomList.getElementAt(dataModel.currentMicroPageIndex) as BorderContainer).
								getElementAt(0)).dispatchEvent(new MyCustomEvent("changBackground",{background:backModel}));
							
						}
					}
					else
					{
						backgroundGroup.addElement(rect);
						this.normalGroup.addElementAt(backgroundGroup,0);
					}
					
					return;
				}
				var background:Image = new Image();
				var loader:Loader = new Loader();
				backgroundGroup.addElement(background);
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE,function(event:Event):void{
					
					background.source = (loader.content as Bitmap).bitmapData;
					background.width = model.templateW;
					background.height = model.templateH;
					background.scaleMode="stretch";
					background.x = backModel.x;
					background.y = backModel.y;
					loader.unload()
				});
				
				loader.load(new URLRequest(backModel.url));
				background.mouseChildren = false;
				background.mouseEnabled = false;
				
				//处理修改背景图片
				if(this.normalGroup.numElements>0)
				{
					if(this.normalGroup.getElementAt(0) is myBackgroundView)
					{
						var backObj:myBackgroundView = this.normalGroup.getElementAt(0) as myBackgroundView;
						backObj.removeAllElements();
						backObj.addElement(background);
						this.model.getBackgroundVO(0).id = backModel.id;
						this.model.getBackgroundVO(0).color = 0;
						((FlexGlobals.topLevelApplication.bottomList.getElementAt(dataModel.currentMicroPageIndex) as BorderContainer).
							getElementAt(0)).dispatchEvent(new MyCustomEvent("changBackground",{background:backModel}));
					}
				}
				else
				{
					this.normalGroup.addElementAt(backgroundGroup,0);
				}
			}
			
			private function loadDecorate(decorateModel:DecoratorVO,isAdd:Boolean=false):void
			{
				var loader1:Loader = new Loader();	
				var img:InteractivePNG = new InteractivePNG();
				normalGroup.addElement(img);
				loader1.contentLoaderInfo.addEventListener(Event.COMPLETE,function(event:Event):void{
					
					if(isAdd)
					{
						decorateModel.width = (loader1.content as Bitmap).bitmapData.width;
						decorateModel.height = (loader1.content as Bitmap).bitmapData.height;
						decorateModel.x = mouseX-decorateModel.width/2;
						decorateModel.y = mouseY-decorateModel.height/2;
						model.addChild(decorateModel);
						((FlexGlobals.topLevelApplication.bottomList.getElementAt(dataModel.currentMicroPageIndex) as BorderContainer).
							getElementAt(0)).dispatchEvent(new MyCustomEvent("addDecorateChanged",{decorate:decorateModel}));
					}
					addImage(decorateModel,(loader1.content as Bitmap).bitmapData,img);
					loader1.unload();
				});
				
				loader1.load(new URLRequest(decorateModel.url));
				
				
			}
			
			//添加装饰
			private function addImage(decorateModel:DisplayObjectVO, imgData:BitmapData,img:InteractivePNG):void {
				img.x = decorateModel.x;
				img.y = decorateModel.y;
				img.model = decorateModel;
				img.rotation = decorateModel.rotation;
				var bt:Bitmap = new Bitmap(imgData);
				bt.width = decorateModel.width;
				bt.height = decorateModel.height;
				img.width = decorateModel.width;
				img.height = decorateModel.height;
				img.addChild(bt);
				img.alpha = decorateModel.alpha;
				img.filters = getModelFilters(decorateModel);
				img.addEventListener("objectHandlesChanged",imgPropertyChange_Handler);
				
				//添加装饰物控制点
				objectHandles.registerComponent(img,img,getHandlerArray(VOName.DECORATOR),true);
			}
			
			//取得模型的滤镜效果
			private function getModelFilters(model:DisplayObjectVO):Array
			{
				var filters:Array = new Array();
				for(var i:int=0;i<model.filters.length;i++)
				{
					if(model.filters[i] is DropShadowFilterVO)
					{
						filters.push(new DropShadowFilter(4,(model.filters[i] as DropShadowFilterVO).angle,(model.filters[i] as DropShadowFilterVO).color));
					}
				}
				return filters;
			}
			
			
			//处理照片自动填充
			private function onAutoFillPhoto_Handler(event:MyCustomEvent):void
			{
				for(var i:int=0;i<this.normalGroup.numElements;i++)
				{
					if(this.normalGroup.getElementAt(i) is MyGroup)
					{
						if(((this.normalGroup.getElementAt(i) as MyGroup).getElementAt(0) as MyImage).model == event.data.oldPhoto as PhotoVO)
						{
							this.loadPhoto(event.data.newPhoto,'autoFill',event.data.oldPhoto);
						}
					}
				}
			}
			
			private function loadPhoto(photoModel:PhotoVO,type:String='add',oldPhoto:PhotoVO=null,fromTemplate:Boolean=true):void
			{
				
				var tempBorder:MyGroup;
				var dropShodow:flash.filters.DropShadowFilter = new flash.filters.DropShadowFilter(0,0);
				
				var bound:Rectangle = photoModel.getBound();
				var crop:Rectangle = photoModel.cropRectangle;   //裁切大小
				var tempImg:MyImage = new MyImage();
				var handles:Array = getHandlerArray(VOName.PHOTO); //控制点设置
				//遮罩和遮罩图片
				var maskImg:Image;
				var maskImgPng:Image;
				
				//照片边框处理
				var imgBorder:Rect = new Rect();
				var borderAlpha:Number = 0;
				
				tempImg.model = photoModel;
				//处理自动填充照片
				if(type=='autoFill' && oldPhoto!= null)
				{
					for(var i:int=0;i<this.normalGroup.numElements;i++)
					{
						if(this.normalGroup.getElementAt(i) is MyGroup)
						{
							if(((this.normalGroup.getElementAt(i) as MyGroup).getElementAt(0) as MyImage).model == oldPhoto)
							{
								tempBorder = this.normalGroup.getElementAt(i) as MyGroup;
								(tempImg.model as PhotoVO).frameVO = ((tempBorder.getElementAt(0) as MyImage).model as PhotoVO).frameVO;
								tempBorder.removeElementAt(0);
								tempBorder.addElementAt(tempImg,0);
								if(tempBorder.getElementAt(2)) maskImg = tempBorder.getElementAt(2) as Image;
								if(tempBorder.getElementAt(3)) maskImgPng = tempBorder.getElementAt(3) as Image;
							}
						}
					}
				}else
				{
					tempBorder = new MyGroup();
					this.normalGroup.addElement(tempBorder);
					
					//添加相框
					maskImg = new Image();
					maskImgPng = new Image();
					maskImgPng.scaleMode = "stretch";
					maskImg.scaleMode = "stretch";
					maskImgPng.top = 0;
					maskImgPng.bottom = 0;
					maskImgPng.left = 0;
					maskImgPng.right = 0;
					
					maskImgPng.mouseEnabled = false;
					maskImgPng.mouseChildren =false;
					
					maskImg.top = 0;
					maskImg.bottom = 0;
					maskImg.left = 0;
					maskImg.right = 0;
					maskImg.cacheAsBitmap = true;
					
					//添加元素到照片对象里,照片,边框,相框遮罩,相框图片
					
					tempBorder.addElementAt(tempImg,0);
					tempBorder.addElement(imgBorder);
					tempBorder.addElement(maskImg);
					tempBorder.addElement(maskImgPng);
					//结束添加相框
					if((tempImg.model as PhotoVO).frameVO != null)
					addMaskForPhoto(tempBorder,(tempImg.model as PhotoVO).frameVO);
					
				}
				
				if(photoModel.borderWeight>0)
				{
					borderAlpha = 1;
				}
				var ibFill:SolidColorStroke = new SolidColorStroke(photoModel.borderColor,photoModel.borderWeight,borderAlpha);
				ibFill.joints = JointStyle.MITER;
				imgBorder.top = imgBorder.right = imgBorder.left = imgBorder.bottom =0;
				imgBorder.stroke = ibFill;
				//结束
				
				
				if(photoModel.photoId == "-1")
				{
					tempImg.source = URLS.DROPHERE;			
				}
				else if(photoModel.photoItem.img != null)
				{
					tempImg.source = photoModel.photoItem.img;
				}
				else
				{
					var loaderUserPhoto:Loader = new Loader();
					loaderUserPhoto.contentLoaderInfo.addEventListener(Event.COMPLETE,function(event:Event):void{
						photoModel.photoItem.img = (loaderUserPhoto.content as Bitmap).bitmapData;
						tempImg.source = photoModel.photoItem.img;
					});
					loaderUserPhoto.load(new URLRequest(photoModel.url));
				}
				
				//图片容器大小
				tempBorder.height = crop.height;  
				tempBorder.width = crop.width;
				
				//图片容器座标
				tempBorder.x =  photoModel.x+crop.x;
				tempBorder.y = photoModel.y+crop.y;
				
				tempBorder.id = photoModel.timeId;
				tempBorder.rotation = photoModel.rotation;
				
				//图片座标
				tempImg.x = -crop.x;
				tempImg.y = -crop.y;
				tempImg.scaleMode = "stretch";
				tempImg.width = photoModel.width;
				tempImg.height = photoModel.height;
					
				//添加到舞台
				tempBorder.clipAndEnableScrolling = true;
				tempBorder.alpha = photoModel.alpha;
				tempBorder.filters = getModelFilters(photoModel);
				//添加约束不能超过用户照片大小
				var constraint:SizeConstraint = new SizeConstraint();
				constraint.minWidth = 20;
				constraint.maxWidth = photoModel.width;
				constraint.minHeight = 20;
				constraint.maxHeight = photoModel.height;
				
				tempBorder.addEventListener("objectHandlesChanged",imgPropertyChange_Handler);
				tempBorder.addEventListener(DragEvent.DRAG_ENTER,tempBorderDragEnter_Handler);
				tempBorder.addEventListener(DragEvent.DRAG_DROP,normalGroup_dragDropHandler);
				//添加控制器
				
				
				objectHandles.registerComponent(tempBorder,tempBorder,handles,true,new Array(constraint));
				
				
				var filter:Array = new Array();
				filter.push(dropShodow);
				tempImg.filters = filter;
				if(maskImg.bitmapData != null)	tempImg.mask = maskImg;
			}
			
			
			//处理文字
			private function loadText(text:TextVO,isAdd:Boolean=false):void
			{
				var loader1:Loader = new Loader();	
				var img:MyImage = new MyImage();
				
				normalGroup.addElement(img);
				
				loader1.contentLoaderInfo.addEventListener(Event.COMPLETE,function(event:Event):void{
					
					if(isAdd)
					{
						text.width = (loader1.content as Bitmap).bitmapData.width;
						text.height = (loader1.content as Bitmap).bitmapData.height;
						text.x = mouseX-text.width/2;
						text.y = mouseY-text.height/2;
						model.addChild(text);
						((FlexGlobals.topLevelApplication.bottomList.getElementAt(dataModel.currentMicroPageIndex) as BorderContainer).
							getElementAt(0)).dispatchEvent(new MyCustomEvent("addTextChanged",{text:text}));
					}
					addText(text,(loader1.content as Bitmap).bitmapData,img);
					loader1.unload();
				});
				
				var param:URLVariables = new URLVariables();
				param.content = text.content;
				param.size = text.fontSize;
				param.font = text.fontFamily;
				param.color = text.color.toString(16);
				param.bold = text.bold;
				var url:URLRequest = new URLRequest(URLS.FONT_SERVICE);
				url.data = param;
				url.method = "POST";
				loader1.load(url);
				trace('最终测试:' + url.url + url.data)
				
			}
			
			//添加文字
			private function addText(text:DisplayObjectVO, imgData:BitmapData,img:MyImage):void {
				img.x = text.x;
				img.y = text.y;
				img.model = text;
				img.rotation = text.rotation;
				
				var minRect:Rectangle = TransformTextToPNG.getMinRect(imgData);
				
				
				var bt:Bitmap = new Bitmap(TransformTextToPNG.removeTransparentRect(imgData,minRect));
				img.source = bt;
				img.doubleClickEnabled = true;
				img.addEventListener(MouseEvent.DOUBLE_CLICK,editText_Handler);
				img.addEventListener("objectHandlesChanged",imgPropertyChange_Handler);

				//添加文字控制点
				objectHandles.registerComponent(img,img,getHandlerArray(VOName.TEXT),true);
			}
			
			
			
			//编辑器样式
			private function getHandlerArray(type:String):Array
			{
				var handles:Array = [];
				var zero:Point = new Point(0,0);
				var sizeScale:Number =  dataModel.minScale;
				
				//旋转图标
				handles.push( new HandleDescription( HandleRoles.ROTATE,	
					new Point(0,100) , 	
					new Point(0,0),
					new Flex4HandleFactory("rotate"),null, sizeScale)); 
				//删除图标
				handles.push( new HandleDescription( HandleRoles.DEL_PHOTO,	
					new Point(100,0) , 	
					new Point(100,0),
					new Flex4HandleFactory("del"),null, sizeScale)); 
				
				//绘制边框
				handles.push( new HandleDescription( HandleRoles.RESIZE_BORDER,	
					new Point(0,0) , 	
					new Point(0,0),
					new Flex4HandleFactory("border"),null,sizeScale )); 
				
				
				if(type==VOName.TEXT) return handles;
				
				if(type==VOName.PHOTO)
				{
					
					//调整照片
					handles.push(new HandleDescription( HandleRoles.RESIZE_PHOTO,	
						new Point(50,50) , 	
						new Point(-75,-75),
						new Flex4HandleFactory("photo"),null)); 
				}
				
				
				//调整大小
				handles.push( new HandleDescription( HandleRoles.RESIZE_DOWN_RIGHT,
					new Point(100,100) , 
					zero,null,null,sizeScale ) );
				
				return handles;
			}
			
			//处理变更编辑页
			protected function pageIndexChange_Handle(event:Event):void
			{
				this.normalGroup.removeAllElements();
				if(model)
				{
					this.height  = model.templateH;
					this.width	= model.templateW;
					this.clipAndEnableScrolling = true;
					
					//将元素添加到页面中
					for(var i:int=0;i<model.numChildren;i++)
					{
						if(model.getChildAt(i) is BackgroundVO)
						{
							this.loadBackground(model.getChildAt(i) as BackgroundVO);
						}
						var o:DisplayObjectVO = model.getChildAt(i);
						//处理图片信息
						if(model.getChildAt(i) is PhotoVO)
						{
							this.loadPhoto(model.getChildAt(i) as PhotoVO);
						}
						if(model.getChildAt(i) is DecoratorVO)
						{
							this.loadDecorate(model.getChildAt(i) as DecoratorVO);
						}
						if(model.getChildAt(i) is TextVO)
						{
							this.loadText(model.getChildAt(i) as TextVO);
						}
					}
					
					
				}
			}
			
			protected function backgroundClick_Handler(event:MouseEvent) : void
			{	
					
				if( event.target is ImageSkin ) return;
				if( event.target is InteractivePNG ) return;
				
				objectHandles.selectionManager.clearSelection();
				
				PopupModellocator.getInstance().popAll();
				
				/*
				if(textEditor.textArea == null) return;
				
				if(!text_img.visible && textEditor.textArea.text!="")
				{
					tv.content = textEditor.textArea.text;
					loadTextImg(text_img,tv);
				}else{
					text_img.visible = true;
				}
				*/
			}
			
			
			//处理组件单击事件
			protected function workGroupFouseOut_Handler(event:Event):void
			{
				this.setFocus();
				objectHandles.selectionManager.clearSelection();
			}

			//处理图片变更信息
			protected function imgPropertyChange_Handler(event:MyCustomEvent):void
			{
				var e:MyCustomEvent = event as MyCustomEvent;
				var model:*;
				if(event.currentTarget is InteractivePNG)
				{
					model = this.model.getChildAt(this.model.indexOf((event.currentTarget as InteractivePNG).model));
					var bt1:Bitmap = (event.target as InteractivePNG).getChildAt(0) as Bitmap;
					var bt2:Bitmap = ((event.target as InteractivePNG).getChildAt(1) as Bitmap);
					
							model.x = e.data.x;
							
							model.y = e.data.y;
							
							model.rotation = e.data.rotation;
							
							bt1.width = e.data.width;
							bt2.width = e.data.width;
							model.width = e.data.width;
							
							bt1.height = e.data.height;
							bt2.height = e.data.height;
							model.height = e.data.height;
					
				}
				else if(event.currentTarget is MyGroup)
				{
					//照片变更
					var img:MyImage = (event.currentTarget as MyGroup).getElementAt(0) as MyImage;
					model = img.model ;
					var rect:Rectangle = model.cropRectangle;
					
					rect.x = -img.x;
					rect.y = -img.y;
					rect.width = e.data.width;
					rect.height =e.data.height;
							model.x = e.data.x-rect.x;
							model.y =  e.data.y-rect.y;
							model.rotation = e.data.rotation;
							model.width =  img.width;
							model.height =  img.height;
							model.cropRectangle = rect;
							
				}
				else if(event.currentTarget is MyImage)
				{
					//文字变更
					model = (event.currentTarget as MyImage).model;
					model.x = e.data.x;
					model.y = e.data.y;
					model.width = e.data.width;
					model.height = e.data.height;
					model.rotation = e.data.rotation;
				}
				
				((FlexGlobals.topLevelApplication.bottomList.getElementAt(dataModel.currentMicroPageIndex) as BorderContainer).
					getElementAt(0)).dispatchEvent(new MyCustomEvent("dataChanged",model));
				
			}
			
			protected function normalGroup_dragEnterHandler(event:DragEvent):void
			{
				if(event.dragSource.hasFormat(VOName.DisplayObject))
				{
					DragManager.acceptDragDrop(event.target as IUIComponent);
					
					for(var i:int = 0;i<this.normalGroup.numElements;i++)
					{
						if(this.normalGroup.getElementAt(i) is InteractivePNG)
						{
							(this.normalGroup.getElementAt(i) as InteractivePNG).mouseEnabled = false;
							(this.normalGroup.getElementAt(i) as InteractivePNG).mouseChildren = false;
						}
					}
				}
			}
			
			//拖放处理
			protected function normalGroup_dragDropHandler(event:DragEvent):void
			{
				//恢复装饰品的鼠标交互
				for(var i:int = 0;i<this.normalGroup.numElements;i++)
				{
					if(this.normalGroup.getElementAt(i) is InteractivePNG)
					{
						(this.normalGroup.getElementAt(i) as InteractivePNG).mouseEnabled = true;
						(this.normalGroup.getElementAt(i) as InteractivePNG).mouseChildren = true;
					}
				}
				
				var data:DisplayObjectVO = (event.dragSource.dataForFormat(VOName.DisplayObject) as DisplayObjectVO).cloneVO();
				var point:Point = new Point(mouseX,mouseY);
				
				
				//如果是照片
				if(data is PhotoVO)
				{	
					var photo:PhotoVO = data as PhotoVO;
							
					//如果放置的目标是照片框
					if(event.target is MyGroup)
					{
						var img:MyImage = new MyImage();
						var tmpGp:MyGroup = event.target as MyGroup;
						//var oldimg:MyImage = tmpGp.getElementAt(1) as MyImage;
						var newX:Number = 0;
						var newY:Number = 0;
						img.source = photo.photoItem.img;
						img.scaleMode = "stretch";
						
						//修正高宽
						if(tmpGp.width >= tmpGp.height)
						{
							if(photo.photoItem.img.width<=photo.photoItem.img.height )
							{
								if(tmpGp.height <= photo.photoItem.img.height*(tmpGp.width/photo.photoItem.img.width))
								{
									img.height = photo.photoItem.img.height*(tmpGp.width/photo.photoItem.img.width);
									img.width = tmpGp.width;
								}
								else
								{
									img.width = photo.photoItem.img.width*(tmpGp.height/photo.photoItem.img.height);
									img.height = tmpGp.height;
								}
								newY = (img.height-tmpGp.height)/2;
							}
							else
							{
								if(tmpGp.width <= photo.photoItem.img.width*(tmpGp.height/photo.photoItem.img.height))
								{
									img.width = photo.photoItem.img.width*(tmpGp.height/photo.photoItem.img.height);
									img.height = tmpGp.height;
								}
								else
								{
									img.height = photo.photoItem.img.height*(tmpGp.width/photo.photoItem.img.width);
									img.width = tmpGp.width;
								}
								newX =  (img.width-tmpGp.width)/2;
							}
							
						}
						else
						{
							if(photo.photoItem.img.width>=photo.photoItem.img.height)
							{
								img.width = photo.photoItem.img.width*(tmpGp.height/photo.photoItem.img.height);
								img.height = tmpGp.height;
								newX =  (img.width-tmpGp.width)/2;
							}
							else
							{
								img.height = photo.photoItem.img.height*(tmpGp.width/photo.photoItem.img.width);
								img.width = tmpGp.width;
								newY = (img.height-tmpGp.height)/2;
							}
						}
						
						//修改新的裁切坐标
						photo.cropRectangle = new Rectangle(newX,newY,tmpGp.width,tmpGp.height);
						img.x = -photo.cropRectangle.x;
						img.y = -photo.cropRectangle.y;
						
						photo.width = img.width;
						photo.height = img.height;
						img.model = photo;
						//oldimg = img;
						
						var timg:MyImage = ((event.target as MyGroup).removeElementAt(0) as MyImage);
						var photoArray:Array = this.model.getPhotoVOs();
						var obj:int  = photoArray.indexOf(timg.model);
						(event.target as MyGroup).addElementAt(img,0)
						
						
						var oldPhoto:PhotoVO = this.model.getPhotoVOs()[obj] as PhotoVO;
						
						photo.frameVO = oldPhoto.frameVO;
						
						photo.x = tmpGp.x-newX;
						photo.y = tmpGp.y-newY;
						
						((FlexGlobals.topLevelApplication.bottomList.getElementAt(dataModel.currentMicroPageIndex) as BorderContainer).
							getElementAt(0)).dispatchEvent(new MyCustomEvent("photoChanged",{newImg:img,oldModel:oldPhoto}));
						
						var VOs:Array = new Array();
						
						VOs.push(oldPhoto);
						this.model.removeVOs(VOs);
						
						
						this.model.addChildAt(photo,obj);
						
						//发送原来照片使用标识减1事件
						FlexGlobals.topLevelApplication.photoHeader.dispatchEvent(
							new MyCustomEvent("removeUsedPhoto",oldPhoto));
						
						//添加使用标识
						(event.dragSource.dataForFormat(VOName.DisplayObject) as PhotoVO).usedNum++;
						
						var constraint:SizeConstraint = new SizeConstraint();
						constraint.minWidth = 20;
						constraint.maxWidth = photo.width;
						constraint.minHeight = 20;
						constraint.maxHeight = photo.height;
						
						objectHandles.setConstraints(event.target,new Array(constraint));
						
						img.filters = timg.filters;
						
						img.mask = timg.mask;
						return;
						
					}
					
					if(photo.bw >= photo.bh)
					{
						photo.height = photo.bh*(1400/photo.bw);
						photo.width = photo.bw*(1400/photo.bw);
					}
					else
					{
						photo.width = photo.bw*(1400/photo.bh);
						photo.height = photo.bh*(1400/photo.bh);
					}
					photo.cropRectangle = new Rectangle(0,0,photo.width,photo.height);
					photo.x = point.x-photo.width/2;
					photo.y = point.y-photo.height/2;
					this.loadPhoto(data as PhotoVO);
					this.model.addChild(photo);
					((FlexGlobals.topLevelApplication.bottomList.getElementAt(dataModel.currentMicroPageIndex) as BorderContainer).
						getElementAt(0)).dispatchEvent(new MyCustomEvent("addPhotoChanged",{photo:photo}));
					
					return;
				}
				
				//如果是装饰物
				if(data is DecoratorVO)
				{
					this.loadDecorate(data as DecoratorVO,true);
					return;
				}
				
				//如果是文字
				if(data is TextVO)
				{
					var text:TextVO = data as TextVO;
					text.fontFamily = (event.dragSource.dataForFormat(VOName.DisplayObject) as TextVO).fontFamily;
					text.fontSize = (event.dragSource.dataForFormat(VOName.DisplayObject) as TextVO).fontSize;
					this.loadText(data as TextVO,true);
					return;
				}
				
				//如果是背景
				if(data is BackgroundVO)
				{
					this.loadBackground(data as BackgroundVO);
					return;
				}
				
				//如果是照片框
				if(data is FrameVO)
				{	
					var frame:FrameVO = data as FrameVO;
					
					//如果放置的目标是照片框
					if(event.target is MyGroup)
					{
						addMaskForPhoto(event.target as MyGroup,frame);	
						((FlexGlobals.topLevelApplication.bottomList.getElementAt(dataModel.currentMicroPageIndex) as BorderContainer).
							getElementAt(0)).dispatchEvent(new MyCustomEvent("frameChanged",{photo:(event.target as MyGroup).getElementAt(0),frame:frame}));
						
					}
				}
			}
			
		
			
			/**
			 * 在临时边框里拖放时
			 * **/
			protected function tempBorderDragEnter_Handler(event:DragEvent):void
			{
				if(event.dragSource.hasFormat(VOName.DisplayObject))
				{
					DragManager.acceptDragDrop(event.target as IUIComponent);
				}
			}
			
			
			//删除选择的对象
			protected function deleteSelectedObjectHandler(event:Event):void
			{
				var obj:* = objectHandles.selectionManager.currentlySelected[0];
				if(!obj) return;
				var img:MyImage;
				var delModel:DisplayObjectVO;
				objectHandles.selectionManager.clearSelection();
				if(obj is MyGroup)
				{
					//照片
					var dg:MyGroup = obj as MyGroup;
					img = dg.getElementAt(0) as MyImage;
					if(!(img.model as PhotoVO).empty)
					{
						FlexGlobals.topLevelApplication.photoHeader.dispatchEvent(new MyCustomEvent("removeUsedPhoto",img.model as PhotoVO));
						(img.model as PhotoVO).photoId ="-1";
						img.source = "assets/drophere.jpg";
						img.width = dg.width;
						img.x=0;
						img.y=0;
						((FlexGlobals.topLevelApplication.bottomList.getElementAt(dataModel.currentMicroPageIndex) as BorderContainer).
							getElementAt(0)).dispatchEvent(new MyCustomEvent("deletePhotoObject",img.model));
						return;
						
					}
					delModel = img.model;
					this.model.removeNormalChild(img.model);
					this.normalGroup.removeElement(dg);
					
				}
				else if(obj is InteractivePNG)
				{
					//装饰
					delModel = (obj as InteractivePNG).model;
					this.normalGroup.removeElement(obj);
					this.model.removeNormalChild((obj as InteractivePNG).model);
				}
				else if(obj is MyImage)
				{
					//文字
					delModel = (obj as MyImage).model;
					this.normalGroup.removeElement(obj);
					this.model.removeNormalChild((obj as MyImage).model);
					
				}
				((FlexGlobals.topLevelApplication.bottomList.getElementAt(dataModel.currentMicroPageIndex) as BorderContainer).
					getElementAt(0)).dispatchEvent(new MyCustomEvent("deleteObject",delModel));
				//this.removeElement(obj);
			}
			private var tv:TextVO;
			private var text_img:MyImage;
			//处理文字编辑
			protected function editText_Handler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				objectHandles.selectionManager.clearSelection();
				
				text_img = event.currentTarget as MyImage;
				text_img.visible = false;
				tv = ((event.currentTarget as MyImage).model as TextVO);
				
				
				
				//trace("测试:" + fontListServices.url);
				
				//textEditor.x = event.currentTarget.x;
				//textEditor.y = event.currentTarget.y;
				
				//PopUpEffect.show(FlexGlobals.topLevelApplication.app1,textEditor,true);
				
				textEditor.x = 600;
				textEditor.y = 300;
				
				PopUpManager.addPopUp(textEditor,FlexGlobals.topLevelApplication.app1);
				
				textEditor.init(fontListServices.url,TextVO.SizeList,tv.fontFamily,tv.content,tv.fontSize,tv.color,tv.bold,tv.italic);
				
				//trace('字体颜色:' + tv.color)
				
				//if(textEditor.textArea == null) return;
				//textEditor.textArea.text = tv.content;
				
//				textEditor.info_txt.text = tv.content;
//				textEditor.format.size = tv.fontSize;
//				textEditor.info_txt.setTextFormat(textEditor.format);
//				
				
				//textEditor.textArea.setStyle("fontSize",tv.fontSize);
				//textEditor.textArea.setStyle("lineBreak","explicit");
				
				
				//textEditor.textArea.text = tv.content;
				
				//RichTextEditor.setText(tv.content);
				
//				textEditor.textArea.addEventListener(TextOperationEvent.CHANGING,function(event:TextOperationEvent):void{
//					textEditor.height = textEditor.textArea.scroller.viewport.contentHeight +50/dataModel.currentScale;
//					textEditor.width = textEditor.textArea.scroller.viewport.contentWidth +50/dataModel.currentScale;
//					
//				});
				
				//if(textEditor.textArea.text == "双击添加文字") textEditor.textArea.text = "";
				
				
				
				//textEditor.visible = true;
				//textEditor.textArea.setFocus();
				
//				textEditor.textArea.addEventListener(FocusEvent.FOCUS_OUT,function(event:Event):void{
//					if(!img.visible && textEditor.textArea.text!="")
//					{
//						tv.content = textEditor.textArea.text;
//						loadTextImg(img,tv);
//					}else
//					{
//						img.visible = true;
//						textEditor.visible = false;
//					}
//					
//				});
			}
			private function loadTextImg(img:MyImage,tv:TextVO):void
			{
				var loader:Loader = new Loader();
				var url:URLRequest = new URLRequest(URLS.FONT_SERVICE);
				var param:URLVariables = new URLVariables();
				
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE,function(event:Event):void{
					
					var minRect:Rectangle = TransformTextToPNG.getMinRect((loader.content as Bitmap).bitmapData);
					
					var bt:Bitmap = new Bitmap(TransformTextToPNG.removeTransparentRect((loader.content as Bitmap).bitmapData,minRect));
					img.source = bt;
					img.width = bt.bitmapData.width;
					img.height = bt.bitmapData.height;
					loader.unload();
					
					/*
					//修改2
					textArea.visible = false;
					textArea.text = "";
					*/
					
					//if(textEditor.textArea) textEditor.textArea.text = "";
					//textEditor.visible = false;
					
					
					img.visible = true;
					
					//发送事件修正底部页面列面中的文字
					((FlexGlobals.topLevelApplication.bottomList.getElementAt(dataModel.currentMicroPageIndex) as BorderContainer).
						getElementAt(0)).dispatchEvent(new MyCustomEvent("textChanged",{text:tv}));
				});
				param.content = tv.content;
				param.size = tv.fontSize;
				param.font = tv.fontFamily;
				
				trace(tv.fontFamily);
				param.color = tv.color.toString(16);
				param.bold = tv.bold;
				url.data = param;
				url.method = "POST";
				loader.load(url);
			}
			
			private function addMaskForPhoto(obj:MyGroup,frame:FrameVO):void
			{
				var loaderFramePng:Loader = new Loader();
				var loaderFrameMask:Loader = new Loader();
				var myGroup:MyGroup = obj;
				
				//应用遮罩的照片
				var framePhoto:MyImage = myGroup.getElementAt(0) as MyImage;
				(framePhoto.model as PhotoVO).frameVO = frame;
				
				//遮罩外框图
				var framePng:Image = myGroup.getElementAt(3) as Image;
				//遮罩
				var frameMask:Image = myGroup.getElementAt(2) as Image;
				
				loaderFramePng.contentLoaderInfo.addEventListener(Event.COMPLETE,function(event:Event):void{
					framePng.source = loaderFramePng.content as Bitmap;
					
				});
				loaderFrameMask.contentLoaderInfo.addEventListener(Event.COMPLETE,function(event:Event):void{
					frameMask.source = loaderFrameMask.content as Bitmap;
					frameMask.visible = false;
					framePhoto.mask = frameMask;
					
				});
				loaderFrameMask.load(new URLRequest(frame.maskURL));
				loaderFramePng.load(new URLRequest(frame.url));
				
				
				
			}
			
			protected function onBackgroundColorChanged_Handler(event:MyCustomEvent):void
			{
				var color:uint = event.data as uint;
				var background:BackgroundVO = new BackgroundVO();
				background.color = color;
				this.loadBackground(background);
			}
		
			//当前显示对象下移
			protected function displayObjectDown_Handler(event:Event):void
			{
				var currentObj:* = objectHandles.selectionManager.currentlySelected[0];
				var model:DisplayObjectVO = null;
				var currentIndex:int=-1;
				if(currentObj)
				{
					currentIndex = this.normalGroup.getElementIndex(currentObj as IVisualElement);
					if(currentIndex>1)
					{
						this.normalGroup.setElementIndex(currentObj as IVisualElement,currentIndex-1);
						
						model = getCurrentObjModel(currentObj);
						
						if(model)
						((FlexGlobals.topLevelApplication.bottomList.getElementAt(dataModel.currentMicroPageIndex) as BorderContainer).
							getElementAt(0)).dispatchEvent(new MyCustomEvent("displayObjectDown",model));
						this.model.moveIndexedDown(currentIndex);
					}
				}
			}
			
			//当前显示对象上移
			protected function displayObjectUp_Handler(event:Event):void
			{
				var currentObj:* = objectHandles.selectionManager.currentlySelected[0];
				var model:DisplayObjectVO = null;
				var currentIndex:int=-1;
				if(currentObj)
				{
					currentIndex = this.normalGroup.getElementIndex(currentObj as IVisualElement);
					if(currentIndex<this.normalGroup.numElements-1)
					{
						this.normalGroup.setElementIndex(currentObj as IVisualElement,currentIndex+1);
						model = getCurrentObjModel(currentObj);
						if(model)
						((FlexGlobals.topLevelApplication.bottomList.getElementAt(dataModel.currentMicroPageIndex) as BorderContainer).
							getElementAt(0)).dispatchEvent(new MyCustomEvent("displayObjectUp",model));
						this.model.moveIndexedUp(currentIndex);
					}
				}
			}
			
			protected function selectedObjAlphaChanged_Handler(event:MyCustomEvent):void
			{
				var model:DisplayObjectVO = null;
				var currentObj:* = objectHandles.selectionManager.currentlySelected[0];
				currentObj.alpha = event.data;
				model = getCurrentObjModel(currentObj);
				
				if(model)
				{
					model.alpha = currentObj.alpha;
					var e:MyCustomEvent = new MyCustomEvent("selectedObjAlphaChanged",model);
					((FlexGlobals.topLevelApplication.bottomList.getElementAt(dataModel.currentMicroPageIndex) as BorderContainer).
					getElementAt(0)).dispatchEvent(e);
				}
			}
			
			//获得当前选中对象的数据模型
			private function getCurrentObjModel(currentObj:*):DisplayObjectVO
			{
				var model:DisplayObjectVO=null;
				if(currentObj is MyGroup)
				{
						model = ((currentObj as MyGroup).getElementAt(0) as MyImage).model;
				}
				else if(currentObj is InteractivePNG)
				{
					model = (currentObj as InteractivePNG).model;
				}
				else if(currentObj is MyImage)
				{
					(currentObj as MyImage).model;
				}
				return model;
			}
			
			//阴影修改处理
			protected function dropShadowChanged_Handler(event:MyCustomEvent):void
			{
				var shadow:DropShadowFilter = new DropShadowFilter(4,event.data.shadowAngle,event.data.color);
				var model:DisplayObjectVO = null;
				var currentObj:* = objectHandles.selectionManager.currentlySelected[0];
				var filters:Array = new Array(shadow);
				currentObj.filters = filters;
				var dropShadowFilter:DropShadowFilterVO = new DropShadowFilterVO();
				var modelFilters:Array = new Array(dropShadowFilter);
				dropShadowFilter.color = event.data.color;
				dropShadowFilter.angle = event.data.shadowAngle;
				model = getCurrentObjModel(currentObj);
				
				if(model)
				{
					model.filters = modelFilters;
					var e:MyCustomEvent = new MyCustomEvent("dropShadowChanged",{model:model,filters:filters});
					((FlexGlobals.topLevelApplication.bottomList.getElementAt(dataModel.currentMicroPageIndex) as BorderContainer).
						getElementAt(0)).dispatchEvent(e);
				}
			}
			
			protected function testUpdate_Handler(event:FlexEvent):void
			{
				//trace("a");
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<services:FontListServices id="fontListServices" />
	</fx:Declarations>

	<s:Group id="normalGroup" width="100%" height="100%"  
			 dragEnter="normalGroup_dragEnterHandler(event)"
			 dragDrop="normalGroup_dragDropHandler(event)">
	
	</s:Group>
	
	<!--components:RichTextEditor id="textEditor" visible="false" scaleX="6" scaleY="6" /-->
</s:Group>
