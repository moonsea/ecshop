<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="true" creationComplete="itemrenderer1_creationCompleteHandler(event)">
	<fx:Metadata>
		[Event(name="showMyPhoto",type="com.yzl.events.MyCustomEvent")]
		[Event(name="hideMyPhoto",type="com.yzl.events.MyCustomEvent")]
	</fx:Metadata>
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" />
	</s:layout>
	<fx:Script>
		<![CDATA[
			import com.yzl.events.MyCustomEvent;
			import com.yzl.util.ObjectIdUtil;
			import com.yzl.valueObject.PhotoItem;
			import com.yzl.valueObject.PhotoVO;
			import com.yzl.valueObject.VOName;
			
			import mx.core.DragSource;
			import mx.core.FlexGlobals;
			import mx.core.IUIComponent;
			import mx.events.FlexEvent;
			import mx.graphics.BitmapScaleMode;
			import mx.managers.DragManager;
			import mx.utils.ObjectUtil;
			
			import spark.primitives.BitmapImage;
			
			public var photo:BitmapData;
			
			//鼠标移入处理
			protected function bc_mouseOverHandler(event:MouseEvent):void
			{
				var point:Point = new Point();
				point = (event.currentTarget as BorderContainer).localToGlobal(point);
				var img:Object = {imgbmp:data.photoItem.img,imgX:point.x,imgY:point.y,imgWidth:data.photoItem.img.width,imgHeight:data.photoItem.img.height};
				var e:MyCustomEvent = new MyCustomEvent("showMyPhoto",img);
				bc.setStyle("borderWeight",2);
				bc.setStyle("borderColor","0xFB5B59");
				this.dispatchEvent(e);
			}
			
			//鼠标移出处理
			protected function bc_mouseOutHandler(event:MouseEvent):void
			{
				var img:Object = {imgStr:data.photoItem.img};
				var e:MyCustomEvent = new MyCustomEvent("hideMyPhoto",img);
				bc.setStyle("borderWeight",1);
				bc.setStyle("borderColor","0x939393");
				
				this.dispatchEvent(e);
			}
			
			/*
			//照片删除处理
			protected function image2_clickHandle(event:MouseEvent):void
			{
				
				bc.removeEventListener(MouseEvent.ROLL_OVER,bc_mouseOverHandler);
				bc.removeEventListener(MouseEvent.ROLL_OUT,bc_mouseOutHandler);
				var normalPhoto:PhotoVO = data as PhotoVO;
				var e:MyCustomEvent = new MyCustomEvent("removeUserPhoto",normalPhoto);
				
				this.dispatchEvent(e);
			}
			*/
			
			protected function del_mouseOverHandler(event:MouseEvent):void
			{
				//del.visible = true;
			}
			
			
			protected function del_mouseOutHandler(event:MouseEvent):void
			{
				//del.visible = false;
			}
			
			//照片拖动处理
			private function dropImage(event:MouseEvent,format:String):void
			{
				var ds:DragSource = new DragSource();
				var proxy:BitmapImage = new BitmapImage();
				var imageHandle:Group = new Group();
				proxy.source = img.bitmapData;
				
				if(img.bitmapData.height>img.bitmapData.width)
				{
					proxy.width = img.bitmapData.width*(200/img.bitmapData.height);
					proxy.height = 200;
				}
				else
				{
					proxy.height = img.bitmapData.height*(200/img.bitmapData.width);
					proxy.width = 200;
				}
				
				imageHandle.addElement(proxy);
				ds.addData(data,format);
				DragManager.doDrag(event.currentTarget as IUIComponent,ds,event,imageHandle,-mouseX+proxy.width/2,-mouseY+proxy.height/2);
			}
			
			protected function itemrenderer1_creationCompleteHandler(event:FlexEvent):void
			{
				//trace('黑打手:' + data.photoItem.name);
			}
			
		]]>
	</fx:Script>
	<s:Group mouseOver="del_mouseOverHandler(event)" mouseOut="del_mouseOutHandler(event)" >
		
		<s:BorderContainer top="0" right="0" id="bc" 
						   borderColor="#939393"
						   width="78" height="78"
						   toolTip="请拖动图片到设计区" 
						   rollOver="bc_mouseOverHandler(event)" rollOut="bc_mouseOutHandler(event)">
			
			<s:Image id="img" width="100%" height="100%" source="{data.photoItem.getImage(78,78)}" 
					 horizontalCenter="0" verticalCenter="0"
					 mouseDown="dropImage(event,VOName.DisplayObject)"/>
			
		</s:BorderContainer>
		<!--mx:Image id="del" buttonMode="true" visible="false" click="image2_clickHandle(event)" source="assets/x.gif" top="1" right="1" /-->
		
	</s:Group>
</s:ItemRenderer>
