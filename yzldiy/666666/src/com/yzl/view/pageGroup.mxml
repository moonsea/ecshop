<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="pageGroup_creationCompleteHandler(event)">
	<fx:Metadata>
		[Event(name="dataChanged",type="com.yzl.events.MyCustomEvent")]
		[Event(name="photoChanged",type="com.yzl.events.MyCustomEvent")]
		[Event(name="frameChanged",type="com.yzl.events.MyCustomEvent")]
		[Event(name="addPhotoChanged",type="com.yzl.events.MyCustomEvent")]
		[Event(name="addDecorateChanged",type="com.yzl.events.MyCustomEvent")]
		[Event(name="addTextChanged",type="com.yzl.events.MyCustomEvent")]
		[Event(name="changBackground",type="com.yzl.events.MyCustomEvent")]
		[Event(name="textChanged",type="com.yzl.events.MyCustomEvent")]
		[Event(name="backLoadComplete",type="flash.events.Event")]
		[Event(name="startLoadDisplayObj",type="flash.events.Event")]
		[Event(name="deletePhotoObject",type="com.yzl.events.MyCustomEvent")]
		[Event(name="deleteObject",type="com.yzl.events.MyCustomEvent")]
		[Event(name="autoFillPhoto_pageGroup",type="com.yzl.events.MyCustomEvent")]
		[Event(name="displayObjectUp",type="com.yzl.events.MyCustomEvent")]
		[Event(name="displayObjectDown",type="com.yzl.events.MyCustomEvent")]
		[Event(name="selectedObjAlphaChanged",type="com.yzl.events.MyCustomEvent")]
		[Event(name="dropShadowChanged",type="com.yzl.events.MyCustomEvent")]
	</fx:Metadata>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.king.loadAphaImage.InteractivePNG;
			import com.yzl.AlertWindow.addFramePic;
			import com.yzl.constant.URLS;
			import com.yzl.events.MyCustomEvent;
			import com.yzl.util.TransformTextToPNG;
			import com.yzl.valueObject.BackgroundVO;
			import com.yzl.valueObject.DecoratorVO;
			import com.yzl.valueObject.DisplayObjectVO;
			import com.yzl.valueObject.FrameVO;
			import com.yzl.valueObject.MyGroup;
			import com.yzl.valueObject.MyImage;
			import com.yzl.valueObject.PageVO;
			import com.yzl.valueObject.PhotoVO;
			import com.yzl.valueObject.TextVO;
			import com.yzl.valueObject.filters.DropShadowFilterVO;
			
			import flash.filters.DropShadowFilter;
			
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.graphics.SolidColor;
			import mx.graphics.SolidColorStroke;
			
			import spark.components.BorderContainer;
			import spark.components.Image;
			import spark.primitives.Rect;
			
			public var model:PageVO;
			
			
			protected function pageGroup_creationCompleteHandler(event:FlexEvent):void
			{
				this.addEventListener("dataChanged",onDataChanged_Handler);
				this.addEventListener("textChanged",onTextChanged_Handler);
				this.addEventListener("photoChanged",onPhotoChanged_Handler);
				this.addEventListener("frameChanged",onFrameChanged_Handler);
				this.addEventListener("addPhotoChanged",onAddPhotoChanged_Handler);
				this.addEventListener("addDecorateChanged",onAddDecorateChanged_Handler);
				this.addEventListener("addTextChanged",onAddTextChanged_Handler);
				this.addEventListener("changBackground",onChangedBackground_Handler);
				this.addEventListener("deleteObject",onDeleteObject_Handler);
				this.addEventListener("deletePhotoObject",onDeletePhotoObject_Handler);
				this.addEventListener("startLoadDisplayObj",onStartLoadDisplayObj_Handler);
				this.addEventListener("autoFillPhoto_pageGroup",onAutoFillPhoto_Handler);
				this.addEventListener("displayObjectDown",displayObjectDown_Handler);
				this.addEventListener("displayObjectUp",displayObjectUp_Handler);
				this.addEventListener("selectedObjAlphaChanged",selectedObjAlphaChanged_Handler);
				this.addEventListener("dropShadowChanged",dropShadowChanged_Handler);
				this.minHeight  = model.templateH;
				this.minWidth	= model.templateW;
				dispatchEvent(new Event("startLoadDisplayObj"));
			}
			
			
			private function onStartLoadDisplayObj_Handler(event:Event):void
			{
				this.removeAllElements();
				//将元素添加到页面中
				for(var i:int=0;i<model.numChildren;i++)
				{
					if(model.getChildAt(i) is BackgroundVO)
					{
						this.loadBackground(model.getChildAt(i) as BackgroundVO);
					}
					
					//处理图片信息
					else if(model.getChildAt(i) is PhotoVO)
					{
						this.loadPhoto(model.getChildAt(i) as PhotoVO);
					}
					else if(model.getChildAt(i) is DecoratorVO)
					{
						this.loadDecorate(model.getChildAt(i) as DecoratorVO);
					}
					else if(model.getChildAt(i) is TextVO)
					{
						this.loadText(model.getChildAt(i) as TextVO);
					}
				}
				
				
			}
			
			private function loadBackground(backModel:BackgroundVO):void
			{
				var backgroundGroup:myBackgroundView = new myBackgroundView();
				if(backModel.color)
				{
					var ti:Image = new Image();
					var rect:Rect = new Rect();
					rect.width = model.templateW;
					
					rect.height =  model.templateH;
					rect.fill = new SolidColor(backModel.color);
					if(this.numElements>0)
					{
						if(this.getElementAt(0) is myBackgroundView)
						{
							this.model.getBackgroundVO(0).color = backModel.color;
							(this.getElementAt(0) as myBackgroundView).removeAllElements();
							(this.getElementAt(0) as myBackgroundView).addElement(rect);
						
						}
					}
					else
					{
						backgroundGroup.addElement(rect);
						this.addElementAt(backgroundGroup,0);
					}
					return;
				}
				var background:MyImage = new MyImage();
				var loader:Loader = new Loader();
				backgroundGroup.addElement(background);
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE,function(event:Event):void{
					
					//trace("模版背景图:"+loader.contentLoaderInfo.url);
					
					background.source = (loader.content as Bitmap).bitmapData;
					background.width = model.templateW;
					background.height =  model.templateH;
					background.scaleMode="stretch";
					background.x = backModel.x;
					background.y = backModel.y;
					loader.unload()
				});
				
				
				loader.load(new URLRequest(backModel.thumbnailURL));
				//处理修改背景图片
				if(numElements>0)
				{
					if(getElementAt(0) is myBackgroundView)
					{
						(getElementAt(0) as myBackgroundView).removeAllElements();
						(getElementAt(0) as myBackgroundView).addElement(background);
					}
				}else
				{
					addElement(backgroundGroup);
				}
				
				
			}
			
			private function loadDecorate(decorateModel:DecoratorVO):void
			{
				var loader1:Loader = new Loader();
				var decorate:MyImage = new MyImage();
				this.addElement(decorate);
				decorate.model = decorateModel;
				loader1.contentLoaderInfo.addEventListener(Event.COMPLETE,function(event:Event):void{
					
					decorate.source = loader1.content as Bitmap;
					
					if(decorateModel.width==0)loader1.content.width;
					if(decorateModel.height==0)loader1.content.height;
					decorate.width = decorateModel.width;
					decorate.height = decorateModel.height;
					decorate.x = decorateModel.x;
					decorate.y = decorateModel.y;
					decorate.rotation = decorateModel.rotation;
					decorate.alpha = decorateModel.alpha;
					decorate.filters = getModelFilters(decorateModel);
					decorate.smooth = true;
					loader1.unload();
				});
				
				loader1.load(new URLRequest(decorateModel.thumbnailURL));
				
			}
			
			private function onAutoFillPhoto_Handler(event:MyCustomEvent):void
			{
				for(var i:int=0;i<this.numElements;i++)
				{
					if(this.getElementAt(i) is MyGroup)
					{
						if(((this.getElementAt(i) as MyGroup).getElementAt(0) as MyImage).model == event.data.oldPhoto as PhotoVO)
						{
							this.loadPhoto(event.data.newPhoto,'autoFill',event.data.oldPhoto);
						}
					}
				}
			}
			
			
			private function loadPhoto(photoModel:PhotoVO,type:String='add',oldPhoto:PhotoVO=null):void
			{
				var tempBorder:MyGroup;
				var dropShodow:flash.filters.DropShadowFilter = new flash.filters.DropShadowFilter(0,0);
				
				var bound:Rectangle = photoModel.getBound();
				var crop:Rectangle = photoModel.cropRectangle;   //裁切大小
				var tempImg:MyImage = new MyImage();
				//遮罩和遮罩图片
				var maskImg:Image;
				var maskImgPng:Image;
				
				//照片边框处理
				var imgBorder:Rect = new Rect();
				var borderAlpha:Number = 0;
				
				tempImg.model = photoModel;
				tempImg.scaleMode = "stretch";
				//处理自动填充照片
				if(type=='autoFill' && oldPhoto!= null)
				{
					for(var i:int=0;i<this.numElements;i++)
					{
						if(this.getElementAt(i) is MyGroup)
						{
							if(((this.getElementAt(i) as MyGroup).getElementAt(0) as MyImage).model == oldPhoto)
							{
								tempBorder = this.getElementAt(i) as MyGroup;
								tempBorder.removeElementAt(0);
								tempBorder.addElementAt(tempImg,0);
								if(tempBorder.getElementAt(2)) maskImg = tempBorder.getElementAt(2) as Image;
								if(tempBorder.getElementAt(3)) maskImgPng = tempBorder.getElementAt(3) as Image;
							}
						}
					}
				}else
				{
					tempBorder = new MyGroup();
					this.addElement(tempBorder);
					
					//添加相框
					maskImg = new Image();
					maskImgPng = new Image();
					maskImgPng.scaleMode = "stretch";
					maskImg.scaleMode = "stretch";
					maskImgPng.top = 0;
					maskImgPng.bottom = 0;
					maskImgPng.left = 0;
					maskImgPng.right = 0;
					
					maskImgPng.mouseEnabled = false;
					maskImgPng.mouseChildren =false;
					
					maskImg.top = 0;
					maskImg.bottom = 0;
					maskImg.left = 0;
					maskImg.right = 0;
					maskImg.cacheAsBitmap = true;
					
					//添加元素到照片对象里,照片,边框,相框遮罩,相框图片
					
					tempBorder.addElementAt(tempImg,0);
					tempBorder.addElement(imgBorder);
					tempBorder.addElement(maskImg);
					tempBorder.addElement(maskImgPng);
					//结束添加相框
					if((tempImg.model as PhotoVO).frameVO != null)
						addMaskForPhoto(tempBorder,(tempImg.model as PhotoVO).frameVO);
				}
				
				
				var loader1:Loader = new Loader();
			
				if(photoModel.borderWeight>0)
				{
					borderAlpha = 1;
				}
				var ibFill:SolidColorStroke = new SolidColorStroke(photoModel.borderColor,photoModel.borderWeight,borderAlpha);
				ibFill.joints = JointStyle.MITER;
				imgBorder.top = imgBorder.right = imgBorder.left = imgBorder.bottom =0;
				imgBorder.stroke = ibFill;
				//结束
				
				//如果照片不是空的
				if(photoModel.photoId == "-1")
				{
					tempImg.source = URLS.DROPHERE;
				}
				else if( photoModel.photoItem.img != null)
				{
					tempImg.source = photoModel.photoItem.img;
				}
				else
				{
					loader1.contentLoaderInfo.addEventListener(Event.COMPLETE,function(event:Event):void{
						
						tempImg.source = loader1.content as Bitmap;
						
						loader1.unload();
					});
					
					loader1.load(new URLRequest(photoModel.thumbnailURL));
				}
				
				tempImg.x = -crop.x;
				tempImg.y = -crop.y;
				tempImg.width = photoModel.width;
				tempImg.height = photoModel.height;
				
				//图片外部边大小
				tempBorder.height = crop.height;  
				tempBorder.width = crop.width;
				
				//图片外部座标
				tempBorder.x =  photoModel.x+crop.x;
				tempBorder.y = photoModel.y+crop.y;
				
				tempBorder.id = photoModel.timeId;
				tempBorder.rotation = photoModel.rotation;
				
				//图片座标
				tempBorder.clipAndEnableScrolling = true;
				tempBorder.alpha = photoModel.alpha;
				var filter:Array = new Array();
				filter.push(dropShodow);
				tempImg.filters = filter;
				tempBorder.filters = getModelFilters(photoModel);
				
				if(maskImg.bitmapData != null)	tempImg.mask = maskImg;
			}
			
			//取得模型的滤镜效果
			private function getModelFilters(model:DisplayObjectVO):Array
			{
				var filters:Array = new Array();
				for(var i:int=0;i<model.filters.length;i++)
				{
					if(model.filters[i] is DropShadowFilterVO)
					{
						filters.push(new DropShadowFilter(4,(model.filters[i] as DropShadowFilterVO).angle,(model.filters[i] as DropShadowFilterVO).color));
					}
				}
				return filters;
			}
			

			//处理文字
			private function loadText(text:TextVO,isAdd:Boolean=false):void
			{
				var loader1:Loader = new Loader();	
				var img:MyImage = new MyImage();
				
				this.addElement(img);
				
				loader1.contentLoaderInfo.addEventListener(Event.COMPLETE,function(event:Event):void{
					addText(text,(loader1.content as Bitmap).bitmapData,img);
					loader1.unload();
				});
				
				var param:URLVariables = new URLVariables();
				param.content = text.content;
				
				//缩小字体,以便快速生成
				param.size = text.fontSize*0.1;
				param.font = text.fontFamily;
				param.color = text.color.toString(16);
				param.bold = text.bold;
				var url:URLRequest = new URLRequest(URLS.FONT_SERVICE);
				url.data = param;
				url.method = "POST";
				loader1.load(url);
				
			}
			
			//添加文字
			private function addText(text:DisplayObjectVO, imgData:BitmapData,img:MyImage):void {
				img.x = text.x;
				img.y = text.y;
				img.model = text;
				img.rotation = text.rotation;
				
				var minRect:Rectangle = TransformTextToPNG.getMinRect(imgData);
				
				
				var bt:Bitmap = new Bitmap(TransformTextToPNG.removeTransparentRect(imgData,minRect));
				img.source = bt;
				
				//缩小的字体放大回原始大小
				img.width = bt.bitmapData.width/0.1;
				img.height = bt.bitmapData.height/0.1;
			}
			
			protected function onDataChanged_Handler(event:MyCustomEvent):void
			{
				var dObj:* = event.data;
				for(var i:int = 0 ;i<this.numElements;i++)
				{
					if(this.getElementAt(i) is MyImage)
					{
						var o:MyImage = this.getElementAt(i) as MyImage;
						if(o.model == dObj)
						{
							o.x = dObj.x;
							o.y = dObj.y;
							o.width = dObj.width;
							o.height = dObj.height;
							o.rotation = dObj.rotation;
						}
						
					}
					
					else if(this.getElementAt(i) is MyGroup)
					{
						var b:MyGroup = this.getElementAt(i) as MyGroup;
						if((b.getElementAt(0) as MyImage).model == dObj)
						{
							var img:MyImage = b.getElementAt(0) as MyImage;
							b.x = dObj.x+dObj.cropRectangle.x;
							b.y = dObj.y+dObj.cropRectangle.y;
							b.width = dObj.cropRectangle.width;
							b.height = dObj.cropRectangle.height;
							b.rotation = dObj.rotation;
							img.x = -dObj.cropRectangle.x;
							img.y = -dObj.cropRectangle.y;
							img.width = dObj.width;
							img.height = dObj.height;
						}
					}
				}
			}
			
			//加载已上传的照片
			private function loaderPhotoHandler(p:MyImage,url:String):void
			{
				var loader:Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE,function(event:Event):void{
					p.source = loader.content as Bitmap;	
					loader.unload();
				});
				loader.load(new URLRequest(url));
			}
			
			//更改照片
			protected function onPhotoChanged_Handler(event:MyCustomEvent):void
			{
				var oldModel:PhotoVO = event.data.oldModel as PhotoVO;
				var img:MyImage = event.data.newImg as MyImage;
				
				for(var i:int = 0 ;i<this.numElements;i++)
				{
					if(this.getElementAt(i) is MyGroup)
					{
						var p:MyImage = (this.getElementAt(i) as MyGroup).getElementAt(0) as MyImage;
						
						if(p.model == oldModel)
						{
							if((img.model as PhotoVO).photoItem.isUpload)
							{
								loaderPhotoHandler(p,img.model.thumbnailURL);
							}
							else
							{
								p.source = img.source;
							}
							p.model = img.model;
							p.x = img.x;
							p.y = img.y;
							p.width = img.width;
							p.height = img.height;
							
						}
					}
				}
			}
			
			//更改遮罩
			protected function onFrameChanged_Handler(event:MyCustomEvent):void
			{
				var frame:FrameVO= event.data.frame as FrameVO;
				var img:MyImage = event.data.photo as MyImage;
				
				for(var i:int = 0 ;i<this.numElements;i++)
				{
					if(this.getElementAt(i) is MyGroup)
					{
						var p:MyImage = (this.getElementAt(i) as MyGroup).getElementAt(0) as MyImage;
						
						if(p.model == img.model)
						{
							addMaskForPhoto(this.getElementAt(i) as MyGroup,frame);							
						}
					}
				}
			}
			
			
			protected function onAddPhotoChanged_Handler(event:MyCustomEvent):void
			{
				this.loadPhoto(event.data.photo);
			}
			
			//处理添加装饰事件
			protected function onAddDecorateChanged_Handler(event:MyCustomEvent):void
			{
				this.loadDecorate(event.data.decorate);
			}
			
			/**
			 * 处理添加文字事件
			 * **/
			protected function onAddTextChanged_Handler(event:MyCustomEvent):void
			{
				this.loadText(event.data.text);
			}

			//处理更改背景图片
			protected function onChangedBackground_Handler(event:MyCustomEvent):void
			{
				this.loadBackground(event.data.background);
			}
			
			
			
			protected function onTextChanged_Handler(event:MyCustomEvent):void
			{
				// TODO Auto-generated method stub
				var dObj:* = event.data.text;
				for(var i:int = 0 ;i<this.numElements;i++)
				{
					if(this.getElementAt(i) is MyImage)
					{
						var o:MyImage = this.getElementAt(i) as MyImage;
						if(o.model == dObj)
						{
							if(o.model is TextVO) this.removeElement(o);
							this.loadText(o.model as TextVO);
						}
						
					}
				}
				//this.loadText(event.data.text);
			}
			
			//删除对象
			protected function onDeleteObject_Handler(event:MyCustomEvent):void
			{
				var obj:DisplayObjectVO = event.data as DisplayObjectVO;
				for(var i:int = 0;i<this.numElements;i++)
				{
					if(this.getElementAt(i) is MyGroup)
					{
						if(((this.getElementAt(i) as MyGroup).getElementAt(0) as MyImage).model == obj)
						{
							this.removeElement(this.getElementAt(i));
							
						}
					}
					else if(this.getElementAt(i) is MyImage)
					{
						if((this.getElementAt(i) as MyImage).model == obj)
						{
							this.removeElement(this.getElementAt(i));
						}
					}
				}
			}
			
			//删除用户照片
			protected function onDeletePhotoObject_Handler(event:MyCustomEvent):void
			{
				var oldModel:PhotoVO = event.data as PhotoVO;
				
				for(var i:int = 0 ;i<this.numElements;i++)
				{
					if(this.getElementAt(i) is MyGroup)
					{
						var p:MyImage = (this.getElementAt(i) as MyGroup).getElementAt(0) as MyImage;
						
						if(p.model == oldModel)
						{
							(p.model as PhotoVO).photoId ="-1";
							p.source = "assets/drophere.jpg";
							p.width = this.getElementAt(i).width;
							p.height = this.getElementAt(i).height;
							p.x=0;
							p.y=0;
						}
					}
				}
			}

			//添加蔗罩
			private function addMaskForPhoto(obj:MyGroup,frame:FrameVO):void
			{
				var loaderFramePng:Loader = new Loader();
				var loaderFrameMask:Loader = new Loader();
				var myGroup:MyGroup = obj;
				
				//应用遮罩的照片
				var framePhoto:MyImage = myGroup.getElementAt(0) as MyImage;
				//遮罩外框图
				var framePng:Image = myGroup.getElementAt(3) as Image;
				//遮罩
				var frameMask:Image = myGroup.getElementAt(2) as Image;
				
				loaderFramePng.contentLoaderInfo.addEventListener(Event.COMPLETE,function(event:Event):void{
					framePng.source = loaderFramePng.content as Bitmap;
					
				});
				loaderFrameMask.contentLoaderInfo.addEventListener(Event.COMPLETE,function(event:Event):void{
					frameMask.source = loaderFrameMask.content as Bitmap;
					frameMask.visible = false;
					framePhoto.mask = frameMask;
					
				});
				loaderFrameMask.load(new URLRequest(frame.maskURL));
				loaderFramePng.load(new URLRequest(frame.url));
				
			}
			
			
			
			protected function displayObjectDown_Handler(event:MyCustomEvent):void
			{
				var model:DisplayObjectVO = event.data as DisplayObjectVO;
				var currentObj:* = getCurrentObj(model);
				
				if(currentObj)
				{
					var currentIndex:int = this.getElementIndex(currentObj as IVisualElement);
					if(currentIndex>1)
					{
						this.setElementIndex(currentObj as IVisualElement,currentIndex-1);
					}
				}
			}
			
			protected function displayObjectUp_Handler(event:MyCustomEvent):void
			{
				var model:DisplayObjectVO = event.data as DisplayObjectVO;
				var currentObj:* = getCurrentObj(model);
				
				if(currentObj)
				{
					var currentIndex:int = this.getElementIndex(currentObj as IVisualElement);
					if(currentIndex<this.numElements-1)
					{
						this.setElementIndex(currentObj as IVisualElement,currentIndex+1);
					}
				}
			}
			
			protected function selectedObjAlphaChanged_Handler(event:MyCustomEvent):void
			{
				var model:DisplayObjectVO = event.data as DisplayObjectVO;
				var currentObj:* = getCurrentObj(model);
				
				if(currentObj)
				{
					currentObj.alpha=model.alpha;
				}
			}
			
			//获得当前选中的对象
			private function getCurrentObj(model:DisplayObjectVO):*
			{
				var currentObj:*;
				for(var i:int=0;i<this.numElements;i++)
				{
					if(this.getElementAt(i) is MyGroup)
					{
						if(((this.getElementAt(i) as MyGroup).getElementAt(0) as MyImage).model == model)
							currentObj = this.getElementAt(i);
					}
					else if(this.getElementAt(i) is InteractivePNG)
					{
						if((this.getElementAt(i) as InteractivePNG).model == model)
							currentObj = this.getElementAt(i);
					}
					else if(this.getElementAt(i) is MyImage)
					{
						if((this.getElementAt(i) as MyImage).model == model)
							currentObj = this.getElementAt(i);
					}
				}
				return currentObj;
			}
			
			//处理阴影修改
			protected function dropShadowChanged_Handler(event:MyCustomEvent):void
			{
				var model:DisplayObjectVO = event.data.model as DisplayObjectVO;
				var filters:Array = event.data.filters as Array;
				var currentObj:* = getCurrentObj(model);
				
				if(currentObj)
				{
					currentObj.filters=filters;
				}
			}
			
		]]>
	</fx:Script>
</s:Group>
